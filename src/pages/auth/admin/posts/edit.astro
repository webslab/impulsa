---
import { WlDatabase } from '@webslab/shared/components/database';
import BaseLayout from '$layouts/Base.astro'
---

<link
  rel="stylesheet"
  onload="this.onload=null;this.rel='stylesheet'"
  href="https://unpkg.com/jodit@4.0.1/es2021/jodit.min.css" />

<BaseLayout
  auth={true}
  admin={true}
  title="Post Editor"
  description="Posts Editor for the Blog">

  <div class="d-flex flex-row justify-content-center align-items-center px-3">
    <a
      class="d-none d-lg-block btn btn-outline-primary pt-0"
      href="/auth/admin/posts">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
        <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8"/>
      </svg>
    </a>

    <h1 class="w-100">Post Editor</h1>

    <button id="save" type="submit" class="btn btn-primary">Save</button>
    <!-- <a -->
    <!--   type="button" -->
    <!--   class="d-none d-lg-block btn btn-primary flex-shrink-1" -->
    <!--   href="/auth/admin/posts/create/">Create</a> -->
  </div>

  <hr />

  <WlDatabase
    live={false}
    target=".container"
    query=""
    client:only="lit">
    <section>
      <div class="container"></div>
    </section>

    <template slot="template" is:raw>
      {% set item = result[0][0] %}
      <div class="row">
        <div class="col-md-8">
          <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <input type="text" class="form-control" id="title" value="{{ item.title }}" />
          </div>

          <div class="mb-3">
            <label for="content" class="form-label">Content</label>

            <textarea
              class="w-100"
              style="min-height: 400px"
              id="post-content"
              name="content">{{ item.content | safe }}</textarea>
          </div>
        </div>

        <div class="col-md-4">
          <div class="mb-3">
            <label for="title" class="form-label">Author</label>
            <input type="text" class="form-control" id="author" disabled data-author="{{ item.author }}" value="{{ item.authorName }}" />
          </div>

          <div class="mb-3">
            <label for="hero" class="form-label">Hero Image</label>
            <input type="text" class="form-control" id="hero" value="{{ item.hero }}" />
            <!-- <input type="file" class="form-control" id="hero" /> -->
          </div>

          <img
            loading="lazy"
            width="100%"
            id="hero-preview"
            class="img-fluid rounded"
            src="{{ item.hero }}" />
        </div>

        <!-- <button id="save" type="submit" class="btn btn-primary col">Save</button> -->
      </div>
    </template>
  </WlDatabase>

  <script>
    import { StringRecordId } from 'surrealdb'

    import { joditInit, waitElement } from '$lib/editorUtils'
    import { authService } from '$lib/auth'
    import type { Post } from '$lib/types';

    customElements.whenDefined('wl-database').then(async () => {
      const wlDatabase: HTMLElement = await waitElement('wl-database');
      const postId = new URLSearchParams(window.location.search).get('id')
      const query = `SELECT author.name as authorName, * FROM ${postId};`

      if (!postId || !wlDatabase) {
        return
      }

      wlDatabase.query = query
      wlDatabase.auth = authService

      wlDatabase.addEventListener('wl-task:completed', () => {
        const db = authService.getDb()

        const hero = document.getElementById('hero') as HTMLInputElement
        const title = document.getElementById('title') as HTMLInputElement
        const author = document.getElementById('author').dataset;
        const content = document.getElementById('post-content') as HTMLTextAreaElement

        joditInit(content)

        const save = document.getElementById('save')
        save.addEventListener('click', async () => {
          const post = {
            hero: hero.value,
            title: title.value,
            author: new StringRecordId(author.author),
            content: content.value,
          }

          // TODO: why?
          // @ts-ignore: check
          const res = await db.merge<Post>(new StringRecordId(postId), post)
          console.log(res)
        })
      })
    })
  </script>
</BaseLayout>
